[
  {
    "objectID": "demonstration.html",
    "href": "demonstration.html",
    "title": "2  Demonstration",
    "section": "",
    "text": "2.1 Single-run experiment\nnl_single@experiment &lt;- experiment(expname = expname,\n                                   outpath = outpath,\n                                   repetition = 1,\n                                   tickmetrics = \"true\",\n                                   idsetup = \"setup\",\n                                   idgo = \"go\",\n                                   idfinal = NA_character_,\n                                   idrunnum = NA_character_,\n                                   runtime = 10^4,\n                                   evalticks = NA_integer_,\n                                   metrics = observer_variables,\n                                   variables = list(),\n                                   constants = default_parameters)\n\nnl_single@simdesign &lt;- simdesign_simple(nl = nl_single,\n                                        nseeds = 1)\neval_variables_constants(nl_single)\nprint(nl_single)\n\nresults_single &lt;- run_nl_all(nl_single)\nCalculate relative metrics:\ntotal_number_patches &lt;- default_parameters$`gui_area-width` * default_parameters$`gui_area-height`\nresults_single &lt;- results_single %&gt;% \n  mutate(dairy_hut_density_percent = 100 * `dairy-hut-count` / total_number_patches,\n         mean_occupation_layers_per_hut = `total-occupation-layers` / `dairy-hut-count`)\nAttach results to nl_single object:\nsetsim(nl_single, \"simoutput\") &lt;- results_single\nWrite output to outpath:\nwrite_simoutput(nl_single)\n# or use alternative:\n#readr::write_csv(results_single, file = paste(outpath, \"0_demonstration.csv\", sep = \"/\"))\nRead output:\nresults_single &lt;- read_csv(paste0(outpath, \"/\", expname, \"_simple.csv\"))\n\nRows: 7201 Columns: 35\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): type-of-experiment, display-mode, record_total-grazing-potential, ...\ndbl (29): [run number], seed, gui_area-width, gui_area-height, gui_grazing-p...\nlgl  (2): gui_conflict-avoidance, unsustainable-state\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nPlot trajectories of metrics:\nplot_name &lt;- paste(outpath, \"demonstration_single.png\", sep = \"/\")\n\npng(plot_name, width = 840, height = 540)\n\ncolor_mapping_grazing &lt;- c(\"Total grazing potential (% max. potential)\" = \"darkgreen\", \n                           \"Grazing land use (% total patches)\" = \"black\",\n                           \"Dairy land use (% total patches)\" = \"cadetblue\",\n                           \"Transhumance land use (% total patches)\" = \"maroon\")\ngrazing_plot &lt;- ggplot(results_single) +\n  geom_path(aes(x = `[step]`, y = `grazing-land-use`, color = \"Grazing land use (% total patches)\"), linewidth = 1.2) +\n  geom_area(aes(x = `[step]`, y = `grazing-land-use_transhumance` + `grazing-land-use_dairy`, fill = \"Dairy land use (% total patches)\"), linewidth = 1.2) +\n  geom_area(aes(x = `[step]`, y = `grazing-land-use_transhumance`, fill = \"Transhumance land use (% total patches)\"), linewidth = 1.2) +\n  geom_path(aes(x = `[step]`, y = `total-grazing-potential`, color = \"Total grazing potential (% max. potential)\"), linewidth = 1.2) + \n  labs(x = \"steps\", y = \"%\") +\n  scale_color_manual(name = \"\", values = color_mapping_grazing) +\n  scale_fill_manual(name = \"\", values = color_mapping_grazing) +\n  theme(legend.position = \"right\")\n\ncolor_mapping_huts &lt;- c(\"Dairy hut density (% total patches)\" = \"black\", \n                        \"Mean occupation layers per hut\" = \"darkgrey\")\nhuts_plot &lt;- ggplot(results_single) +  \n  geom_path(aes(x = `[step]`, y = dairy_hut_density_percent, color = \"Dairy hut density (% total patches)\"), linewidth = 1.2) +\n  geom_path(aes(x = `[step]`, y = mean_occupation_layers_per_hut, color = \"Mean occupation layers per hut\"), linewidth = 1.2) +\n  labs(x = \"steps\", y = \"%\") +\n  scale_color_manual(name = \"\", values = color_mapping_huts) +\n  theme(legend.position = \"right\")\n\ngrid.arrange(grazing_plot, huts_plot, nrow = 2)\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_path()`).\n\ndev.off()\n\npng \n  2 \n\nrm(grazing_plot, huts_plot)\nknitr::include_graphics(plot_name)\nSustainability check:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Demonstration</span>"
    ]
  },
  {
    "objectID": "demonstration.html#single-run-experiment",
    "href": "demonstration.html#single-run-experiment",
    "title": "2  Demonstration",
    "section": "",
    "text": "unsustainable-state = TRUE\ndairy-pressure-coef = 0.0288983\ntranshumance-pressure-coef = 0.0722458\nunsustainable-dairy-herds (%) = 100\nunsustainable-transhumance-herds (%) = 0",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Demonstration</span>"
    ]
  },
  {
    "objectID": "sensitivity-analysis.html",
    "href": "sensitivity-analysis.html",
    "title": "3  Sensitivity analysis",
    "section": "",
    "text": "3.1 Parameter sweeps: symmetric gradient\nnl_batch_1 &lt;- nl(nlversion = \"6.4.0\",\n               nlpath = netlogopath,\n               modelpath = modelpath,\n               jvmmem = 1024)\ndefault_parameters &lt;- list(\n  \"seed\" = 123,\n  \"type-of-experiment\" = \"\\\"user-defined\\\"\",\n  \"gui_area-width\" = 50, \"gui_area-height\" = 25,\n  \"gui_conflict-avoidance\" = \"true\",\n  \"gui_grazing-potential_max\" = 250,\n  \"gui_herd-size-dairy\" = 10,\n  \"gui_herd-size-transhumance\" = 50,\n  \"display-mode\" = \"\\\"grazing-potential\\\"\"\n)\n\nsweep_parameters &lt;- list(\n  \"gui_number-herds-dairy\" = list(values = 1:10),\n  \"gui_number-herds-transhumance\" = list(values = 1:10)\n)\n\nexpname &lt;- \"sensitivity-param-sweep-symmetric\"\nnl_batch_1@experiment &lt;- experiment(expname = expname,\n                                    outpath = outpath,\n                                    repetition = 1,\n                                    tickmetrics = \"true\",\n                                    idsetup = \"setup\",\n                                    idgo = \"go\",\n                                    idfinal = NA_character_,\n                                    idrunnum = NA_character_,\n                                    runtime = 10^4,\n                                    evalticks = NA_integer_,\n                                    metrics = observer_variables,\n                                    variables = sweep_parameters,\n                                    constants = default_parameters)\n\nnl_batch_1@simdesign &lt;- simdesign_distinct(nl = nl_batch_1,\n                                           nseeds = 1)\neval_variables_constants(nl_batch_1)\nprint(nl_batch_1)\n\nresults_batch_1 &lt;- run_nl_all(nl_batch_1)\nCalculate relative metrics:\ntotal_number_patches &lt;- default_parameters$`gui_area-width` * default_parameters$`gui_area-height`\nresults_batch_1 &lt;- results_batch_1 %&gt;% \n  mutate(dairy_hut_density_percent = 100 * `dairy-hut-count` / total_number_patches,\n         mean_occupation_layers_per_hut = `total-occupation-layers` / `dairy-hut-count`)\nAttach results to nl_single object:\nsetsim(nl_batch_1, \"simoutput\") &lt;- results_batch_1\nWrite output to outpath:\nwrite_simoutput(nl_batch_1)\nRead output:\nresults_batch_1 &lt;- read_csv(paste0(outpath, \"/\", expname, \"_distinct.csv\"))\n\nRows: 56170 Columns: 35\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (4): type-of-experiment, display-mode, record_total-grazing-potential, ...\ndbl (29): [run number], gui_number-herds-dairy, gui_number-herds-transhumanc...\nlgl  (2): gui_conflict-avoidance, unsustainable-state\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\nGenerate labels for each run:\nrun_labels &lt;- unique(paste0(\n  \"dairy herds: \", results_batch_1$`gui_number-herds-dairy`, \n  \",\\n transhumance herds: \", results_batch_1$`gui_number-herds-dairy`))\nGet end states:\nresults_batch_1_endstate &lt;- results_batch_1 %&gt;%\n  group_by(`siminputrow`) %&gt;%\n  filter(`[step]` == max (`[step]`)) %&gt;%\n  ungroup()\nPreview how many runs are unsustainable:\ntable(results_batch_1_endstate$`unsustainable-state`)\n\n\nFALSE  TRUE \n    7     3\nggplot(results_batch_1_endstate, aes(y = factor(`siminputrow`), x = `unsustainable-state`)) +\n  geom_point() +\n  scale_y_discrete(labels = run_labels) +\n  labs(y = \"run index\")\nPlot trajectories of metrics:\nplot_name &lt;- paste(outpath, \"sensitivity_batch_1_trajectories.png\", sep = \"/\")\n\npng(plot_name, width = 840, height = 540)\n\ngrazing_trajectories &lt;- ggplot(results_batch_1, aes(x = `[step]`, group = factor(`siminputrow`))) +\n  geom_path(aes(y = `grazing-land-use`,\n                color = factor(`siminputrow`)),\n            linewidth = 1) +\n  scale_color_discrete(name = \"run index\", labels = run_labels, guide = \"none\") +\n  labs(x = \"steps\", y = \"Grazing land use (% total patches)\")\n\nland_use_trajectories &lt;- ggplot(results_batch_1, aes(x = `[step]`, group = factor(`siminputrow`))) +\n  geom_path(aes(y = `total-grazing-potential`,\n                color = factor(`siminputrow`)),\n            linewidth = 1) +\n  scale_color_discrete(name = \"run index\", labels = run_labels) +\n  labs(x = \"steps\", y = \"Total grazing potential (% max. potential)\") +\n  theme(legend.position = \"bottom\")\n\ngrid.arrange(grazing_trajectories, land_use_trajectories, nrow = 2)\n\ndev.off()\n\npng \n  2 \n\nrm(grazing_trajectories, land_use_trajectories)\nknitr::include_graphics(plot_name)\nPlot bifurcation plot:\nsource(\"library/bifurcationPlot.R\")\n\nplot_name &lt;- paste(outpath, \"sensitivity_batch_1_symmetric_bifurcationPlot.png\", sep = \"/\")\n\nobserved_variables &lt;- c(\"total-grazing-potential\",\n                        \"grazing-land-use_dairy\",\n                        \"grazing-land-use_transhumance\",\n                        \"unsustainable-dairy-herds\",\n                        \"unsustainable-transhumance-herds\")\n\npng(plot_name, width = 840, height = 540)\n\nbifurcationPlotSimple(parameter_values = results_batch_1_endstate$`gui_number-herds-dairy`, \n                      observed_variables = results_batch_1_endstate[, observed_variables],\n                      parameter_x_label = \"Number of herds per type\",\n                      variable_y_label = \"%\",\n                      variable_names = observed_variables,\n                      col = c(\"darkgreen\", \"cadetblue\", \"maroon\", \"darkblue\", \"darkred\"),\n                      legend_position = c(1, 75),\n                      cex = 5)\n\ndev.off()\n\npng \n  2\nknitr::include_graphics(plot_name)\nrm(nl_batch_1)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Sensitivity analysis</span>"
    ]
  },
  {
    "objectID": "sensitivity-analysis.html#parameter-sweeps-permutation-gradient-2x",
    "href": "sensitivity-analysis.html#parameter-sweeps-permutation-gradient-2x",
    "title": "3  Sensitivity analysis",
    "section": "3.2 Parameter sweeps: permutation gradient (2x)",
    "text": "3.2 Parameter sweeps: permutation gradient (2x)\n\nnl_batch_2 &lt;- nl(nlversion = \"6.4.0\",\n               nlpath = netlogopath,\n               modelpath = modelpath,\n               jvmmem = 1024)\n\n\ndefault_parameters &lt;- list(\n  \"type-of-experiment\" = \"\\\"user-defined\\\"\",\n  \"gui_area-width\" = 50, \"gui_area-height\" = 25,\n  \"gui_conflict-avoidance\" = \"true\",\n  \"gui_grazing-potential_max\" = 250,\n  \"gui_herd-size-dairy\" = 10,\n  \"gui_herd-size-transhumance\" = 50,\n  \"display-mode\" = \"\\\"grazing-potential\\\"\"\n)\n\nsweep_parameters &lt;- list(\n  \"seed\" = list(values = 0:2),\n  \"gui_number-herds-dairy\" = list(values = 1:10),\n  \"gui_number-herds-transhumance\" = list(values = 1:10)\n)\n\nexpname &lt;- \"sensitivity-param-sweep-permutation_2x\"\n\n\nnl_batch_2@experiment &lt;- experiment(expname = expname,\n                                  outpath = outpath,\n                                  repetition = 1,\n                                  tickmetrics = \"false\", # measure only final state\n                                  idsetup = \"setup\",\n                                  idgo = \"go\",\n                                  idfinal = NA_character_,\n                                  idrunnum = NA_character_,\n                                  runtime = 10^4,\n                                  #evalticks = NA_integer_,\n                                  metrics = observer_variables,\n                                  variables = sweep_parameters,\n                                  constants = default_parameters)\n\nnl_batch_2@simdesign &lt;- simdesign_ff(nl = nl_batch_2,\n                                     nseeds = 1)\n\n\neval_variables_constants(nl_batch_2)\nprint(nl_batch_2)\n\nresults_batch_2 &lt;- run_nl_all(nl_batch_2, split = 4)\n\nSimplify names:\n\nresults_batch_2 &lt;- results_batch_2 %&gt;%\n  rename_with( ~ gsub(\"\\\\-\", \"_\", oldnames)) %&gt;%\n  rename_with( ~ gsub(\"\\\\[\", \"\", oldnames)) %&gt;%\n  rename_with( ~ gsub(\"\\\\]\", \"\", oldnames))\n\nCalculate relative metrics:\n\ntotal_number_patches &lt;- default_parameters$`gui_area-width` * default_parameters$`gui_area-height`\nresults_batch_2 &lt;- results_batch_2 %&gt;% \n  mutate(dairy_hut_density_percent = 100 * dairy_hut_count / total_number_patches,\n         mean_occupation_layers_per_hut = total_occupation_layers / dairy_hut_count)\n\nAttach results to nl_single object:\n\nsetsim(nl_batch_2, \"simoutput\") &lt;- results_batch_2\n\nWrite output to outpath:\n\nwrite_simoutput(nl_batch_2)\n\nRead output:\n\nresults_batch_2 &lt;- readr::read_csv(paste0(outpath, \"/\", expname, \"_ff\", \".csv\"))\n\nGet end states:\n\nresults_batch_2_endstate &lt;- results_batch_2 %&gt;%\n  mutate(parameter_config = paste(gui_number_herds_dairy, gui_number_herds_transhumance, sep = \" vs \")) %&gt;%\n  group_by(parameter_config) %&gt;%\n  filter(step == max (step))\n\nCalculate mean values per parameter configuration:\n\nresults_batch_2_endstate &lt;- results_batch_2_endstate %&gt;%\n  group_by(parameter_config) %&gt;%\n  summarise(\n    number_herds_dairy = mean(gui_number_herds_dairy),\n    number_herds_transhumance = mean(gui_number_herds_transhumance),\n    unsustainable_dairy_herds_mean = mean(unsustainable_dairy_herds),\n    unsustainable_transhumance_herds_mean = mean(unsustainable_transhumance_herds),\n    unsustainable_state_mean = mean(as.numeric(unsustainable_state))\n    )\n\n\nexpname_endstates &lt;- paste0(outpath, \"/\", expname, \"_ff_endstates\", \".csv\")\n\nWrite end state dataset to outpath:\n\nwrite_csv(results_batch_2_endstate, expname_endstates)\n\nRead end state dataset:\n\nresults_batch_2_endstate &lt;- readr::read_csv(expname_endstates)\n\nRows: 100 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): parameter_config\ndbl (5): number_herds_dairy, number_herds_transhumance, unsustainable_dairy_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nPlot triple raster (3 variables, 2 parameters):\n\nsource(\"library/tripleRaster_twoParameters.R\")\n\nplot_name &lt;- paste(outpath, \"sensitivity_batch_2_permutation_tripleRaster.png\", sep = \"/\")\n\npng(plot_name, width = 840, height = 540)\n\ntripleRaster_twoParameters(\n  results_batch_2_endstate,\n  parameter_x = \"number_herds_dairy\",\n  parameter_y = \"number_herds_transhumance\",\n  variable_1 = \"unsustainable_dairy_herds_mean\",\n  variable_2 = \"unsustainable_transhumance_herds_mean\",\n  variable_3 = \"unsustainable_state_mean\",\n  parameter_x_label = \"Number of dairy herds\",\n  parameter_y_label = \"Number of transhumance herds\",\n  variable_1_label = \"% unsustainable\\ndairy herds (mean)\",\n  variable_2_label = \"% unsustainable\\ntranshumance herds (mean)\",\n  variable_3_label = \"Unsustainable\\nend state (mean)\",\n  plot_scale = 5,\n  variable_3_point_number_legend_keys = 3,\n  variable_3_print_values = FALSE)\n\nWarning: `aes_string()` was deprecated in ggplot2 3.0.0.\nℹ Please use tidy evaluation idioms with `aes()`.\nℹ See also `vignette(\"ggplot2-in-packages\")` for more information.\n\ndev.off()\n\npng \n  2 \n\n\n\nknitr::include_graphics(plot_name)\n\n\n\n\n\n\n\n\n\nrm(nl_batch_2)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Sensitivity analysis</span>"
    ]
  },
  {
    "objectID": "sensitivity-analysis.html#parameter-sweeps-permutation-gradient-4x",
    "href": "sensitivity-analysis.html#parameter-sweeps-permutation-gradient-4x",
    "title": "3  Sensitivity analysis",
    "section": "3.3 Parameter sweeps: permutation gradient (4x)",
    "text": "3.3 Parameter sweeps: permutation gradient (4x)\nNOTE: Due to performance issues with nlrx, this experiment is performed in NetLogo’s Behavior Space.\n\nexpname &lt;- \"dairy-vs-transhumance-v1 herd population experiment-table\"\n\nresults_batch_3 &lt;- read.csv(\n  paste0(outpath, \"/\", expname, \".csv\"),\n  skip = 6)\n\n\ndefault_parameters &lt;- list(\n  \"type-of-experiment\" = results_batch_3$type.of.experiment[1],\n  \"gui_area-width\" = results_batch_3$gui_area.width[1],\n  \"gui_area-height\" = results_batch_3$gui_area.height[1],\n  \"gui_conflict-avoidance\" = results_batch_3$gui_conflict.avoidance[1],\n  \"gui_grazing-potential_max\" = results_batch_3$gui_grazing.potential_max[1],\n  \"display-mode\" = results_batch_3$display.mode[1]\n)\n\nsweep_parameters &lt;- list(\n  \"seed\" = unique(results_batch_3$seed),\n  \"gui_number-herds-dairy\" = unique(results_batch_3$gui_number.herds.dairy),\n  \"gui_number-herds-transhumance\" = unique(results_batch_3$gui_number.herds.transhumance),\n  \"gui_herd-size-dairy\" = unique(results_batch_3$gui_herd.size.dairy),\n  \"gui_herd-size-transhumance\" = unique(results_batch_3$gui_herd.size.transhumance)\n)\n\nRename run number and step:\n\nresults_batch_3 &lt;- results_batch_3 %&gt;%\n  rename(run_number = X.run.number.) %&gt;%\n  rename(step = X.step.)\n\nCalculate relative metrics:\n\ntotal_number_patches &lt;- default_parameters$`gui_area-width` * default_parameters$`gui_area-height`\nresults_batch_3 &lt;- results_batch_3 %&gt;% \n  mutate(dairy_hut_density_percent = 100 * dairy.hut.count / total_number_patches,\n         mean_occupation_layers_per_hut = total.occupation.layers / dairy.hut.count)\n\nFilter out configurations:\n\nresults_batch_3_endstate &lt;- results_batch_3 %&gt;%\n  mutate(parameter_config = paste0(\n    gui_number.herds.dairy, \" x \", gui_herd.size.dairy, \" vs \",\n    gui_number.herds.transhumance, \" x \", gui_herd.size.transhumance)) %&gt;%\n  filter(gui_number.herds.dairy %in% sweep_parameters$`gui_number-herds-dairy`[1:5]) %&gt;%\n  filter(gui_number.herds.transhumance %in% sweep_parameters$`gui_number-herds-transhumance`[1:5]) %&gt;%\n  filter(gui_herd.size.dairy %in% sweep_parameters$`gui_herd-size-dairy`[1:5]) %&gt;%\n  filter(gui_herd.size.transhumance %in% unique(sweep_parameters$`gui_herd-size-transhumance`[1:5]))\n\nCalculate mean values per parameter configuration:\n\nresults_batch_3_endstate &lt;- results_batch_3_endstate %&gt;%\n  group_by(parameter_config) %&gt;%\n  summarise(\n    number_herds_dairy = mean(gui_number.herds.dairy),\n    number_herds_transhumance = mean(gui_number.herds.transhumance),\n    herd_size_dairy = mean(gui_herd.size.dairy),\n    herd_size_transhumance = mean(gui_herd.size.transhumance),\n    unsustainable_dairy_herds_mean = mean(unsustainable.dairy.herds),\n    unsustainable_transhumance_herds_mean = mean(unsustainable.transhumance.herds),\n    unsustainable_state_sum =  mean(ifelse(unsustainable.state == \"true\", 1, 0))\n    )\n\nPlot triple raster (3 variables, 4 parameters):\n\nsource(\"library/tripleRaster_fourParameters.R\")\n\nplot_name &lt;- paste(outpath, \"sensitivity_batch_3_permutation_tripleRaster.png\", sep = \"/\")\n\npng(plot_name, width = 840, height = 540)\n\ntripleRaster_fourParameters(\n  results_batch_3_endstate,\n  parameter_x = \"number_herds_dairy\",\n  parameter_y = \"number_herds_transhumance\",\n  parameter_strip_x = \"herd_size_dairy\",\n  parameter_strip_y = \"herd_size_transhumance\",\n  variable_1 = \"unsustainable_dairy_herds_mean\",\n  variable_2 = \"unsustainable_transhumance_herds_mean\",\n  variable_3 = \"unsustainable_state_sum\",\n  parameter_x_label = \"Number of dairy herds\",\n  parameter_y_label = \"Number of transhumance herds\",\n  variable_1_label = \"% unsustainable\\ndairy herds (mean)\",\n  variable_2_label = \"% unsustainable\\ntranshumance herds (mean)\",\n  variable_3_label = \"Unsustainable\\nend state (mean)\",\n  plot_scale = 5,\n  #variable_3_value_label_size = 0.4,\n  # variable_3_point_size = c(0.2, 1),\n  # axis_title_size = 5, \n  axis_text_size = 2.5,\n  #strip_parameter_name_max_length = 2,\n  #strip_parameter_name_occlusion_text = \"herd size\",\n  strip_text_size = 2.5,\n  legend_title_size = 2.5,\n  legend_text_size = 2,\n  variable_3_point_number_legend_keys = 3,\n  variable_3_print_values = FALSE\n  )\n\ndev.off()\n\npng \n  2 \n\n\n\nknitr::include_graphics(plot_name)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Sensitivity analysis</span>"
    ]
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Motivation\nThe motivation for modelling the long-term interaction between transhumance and dairy pastoralism in the Western Alps stems from observing changes in pastoral practices and their impact on the landscape over centuries. In areas like Val Maudagna and the Faravel plateau, traditional dairy-focused practices (involving fixed, dry-stone structures for cheese production) have gradually shifted to transhumance strategies, often due to economic pressures such as the decline in wool prices and shifts in market demands. This shift led to the abandonment of dairy structures as herders adapted to new practices, favouring mobile or temporary solutions. Modelling these interactions helps trace the socio-economic and environmental factors driving these transitions and provides insights into how upland areas were managed and altered over time.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#model-overview",
    "href": "introduction.html#model-overview",
    "title": "1  Introduction",
    "section": "1.2 Model overview",
    "text": "1.2 Model overview\n\n\n\nFrom ethnoarchaological sources to model\n\n\n\n\n\n\n\n\nsource\ninformation\nmodel\ndomain\n\n\n\n\nCarrer, Walsh, Mocci 2020\nDairy-focused cow herders (marghé)herders (bergé)\nDairy herdsherds\nAgent\n\n\nCarrer, Walsh, Mocci 2020\nSummer(gias)\nGrazing season (days)area (grid of land units)\nGlobal\n\n\n\nThe amount and quality of pasture varies within the area\nLand units have specific a maximum grazing potential\nLand unit\n\n\nPasture is consumed by herd animals\nHerd animals decrease the grazing potential of land units\nLand unit\n\n\n\nGrazing requirements vary depending on animal species (body size)require more than sheep (~4:1)\nGrazing depends on a grazing rate, which is larger in dairy than in transhumance herds(dairy: 1 vs transhumance: 0.25)\nGlobal\n\n\n\n\nAfter grazed, pasture fully recovers in one or two years time\nGrazing potential recovery rate\nGlobal\n\n\nCarrer, Walsh, Mocci 2020\nDry-stone huts (casòt)areas not far from water sourcesintermittently\nDairy huts (agents/objects)with higher grazing potential (preferential use for dairy)surrounded by insufficient potential are abandoned (to be reoccupied later)\nAgent\n\n\n\n\n\n\n\n\nInfographic\n\n\nHypotheses / questions to be explored:\n\nUnder which conditions can both populations co-exist?\nUnder which condition(s) does one of the population outcompete the other?\nAre there cycles of growth and reduction of land use by each activity?\nWhat are the parameters determinant for populations to co-exist over the long term?\nAre there characteristic trends in the number and occupation of dairy huts? &gt;Can the structures associated with dairy huts be interpreted as “archaeological markers” of the land use distribution and intensity related to dairy pastoralism.\nDo we observe trends in total grazing potential? How does the vegetation cover behave under different regimes of dairy and transhumance pastoralism?\n\n\n1.2.1 Environment\nThe model represents an area where pastoral land use takes place seasonally as a rectangular grid (width x height), with each pixel equivalent to a patch of pasture. Each pixel has a given carrying capacity (i.e., grazing potential), which varies according to grazing (decrease) and a given recovery rate (increase), through which it recovers towards its maximum carrying capacity (i.e. the local maximum of grazing potential). A pixel can also host the construction of a shelter for dairy herds (a dairy hut), which stays there, used or abandoned, for the rest of the simulation.\n\n\n1.2.2 Agents\nThere are two populations of herds: dairy herds and transhumant herds (e.g., in the Alps, cow and sheep herds, respectively). All herds have the following properties and behavioural rules:\n\nNumber of individual animals does not vary, assuming it is given by herd management.\nGrazing potential required per day, which is assumed to be a function of headcount and a constant metabolic rate per capita.\nWhether it reached a point where the required grazing potential cannot be met at the best available location found without overgrazing, i.e. without overstepping a threshold of sustainable grazing land use (overgrazing-threshold). When one herd flags an unsustainable state, the simulation will stop at the end of the day.\n\nHowever, the two types of herds are differentiated by their behavioural rules:\n\nDairy herds: At the beginning of a grazing season, the herd will choose the best available location for a new dairy hut (i.e. the one offering the most grazing potential within a catchment radius or simply return to the hut used in the last season, if still sustainable. Every day during the grazing season, it will graze the best patch within a given distance from the dairy hut (dairy-hut-radius), reducing th grazing potential by its daily requirement.\nTranshumant herds: At the beginning of the grazing season, the herd will enter the area through the best unoccupied patch on the edges. Each day during the grazing season, the herd moves to the best available patch within a radius determined by a maximum movement speed (transhumance-max-speed) and grazes it, reducing the grazing potential by its daily requirement.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#details",
    "href": "introduction.html#details",
    "title": "1  Introduction",
    "section": "1.3 Details",
    "text": "1.3 Details\n\n1.3.1 Inputs: constants and parameters\n\nGrazing area conditions:\n\narea-width , area-height [integer, patches]: Dimensions of the seasonal grazing area.\nlength-of-grazing-season [integer, days]: Number of days per grazing season.\ngrazing-potential-max-recovery-rate [float, grazing potential units]: Maximum rate of (re)growth of grazing potential. NOTE: growth is modelled with a logistic equation where the maximum is given as grazing-potential_localMax.\ngrazing-potential_max [float, grazing potential units]: Maximum value of grazing-potential_localMax. NOTE: this patch variable is sampled from a uniform distribition U(0, grazing-potential_max].\n\nHerd population:\n\nnumber-herds-dairy , number-herds-transhumance [integer, turtles]: Number of herds focused on dairy or transhumance.\nherd-size-dairy , herd-size-transhumance [integer, grazing animals]: Number of animals (i.e., head count) per herd focused on dairy or transhumance.\n\nHerd grazing behaviour:\n\ngrazing-rate-dairy , grazing-rate-transhumance [float, grazing potential units]: Rate of degradation (consumption + losses) of grazing potential per animal of a herd focused on dairy or transhumance. As typically proportional to animal body mass, grazing-rate-dairy &gt; grazing-rate-transhumance assuming dairy involves bovids, and transhumance, ovicaprids.\novergrazing-threshold [float, grazing potential units]: Estimation of a minimal grazing potential per patch, under which it is considered “over grazed” and thus “inadequate” or “unsustainable” for further grazing land use.\ndairy-hut-radius [float, patch-width]: Maximum distance moved per day by animals in dairy herds from their hut.\ntranshumance-max-speed [float, patch-width]: Maximum distance moved per day by animals in transhumance herds from their current position.\nconflict-avoidance [Boolean]: Whether transhumance herds avoid to graze within the reach of dairy huts.\n\nSimulation control:\n\nrecord_initial-lag [integer, seasons]: Number of seasons after the start of simulations not added to the record, to avoid the strong bias of initial conditions when evaluating equilibrium.\nrecord_sample-frequency [integer, seasons]: Number of seasons after which a state record is taken.\nrecord_equilibrium-threshold [float, standard deviation units]: Deviation from the mean of a measurement record, under which the assumption of stable equilibrium is accepted.\n\n\n\n\n1.3.2 Auxiliar global variables\n\nTime tracking:\n\nseason [integer, seasons]: Number of grazing seasons passed.\nday [integer, days]: Number of days passed in the current grazing season.\n\nCalculated directly from input and kept constant:\n\npatch-count : Total number of patches in the grazing area.\npopulation-size-dairy, population-size-transhumance [integer, grazing animals]: The total number of animals related to each type of pastoralism. These are not true inputs since they are calculated directly from the above as number-herds * herd-size.\ndairy-pressure-coef , transhumance-pressure-coef [float, ?]:\n\nIntermediate measurements:\n\ntotal-grazing-potential_localMax [float, grazing potential units]: Sum of all grazing-potential_localMax, used to calculate dairy-pressure-coef , transhumance-pressure-coef.\nrecord_total-grazing-potential , record_grazing-land-use [float, grazing potential units]: Record of total-grazing-potential and grazing-land-use used to identify asymptotic approach to equilibrium and stop simulation.\n\n\n\n\n1.3.3 Outputs: measurements and aggregate indicators\n\nGrazing potential and land use:\n\ntotal-grazing-potential [float, % of total maximum grazing potential]: Percentage of the total maximum grazing potential currently available.\ngrazing-land-use [float, % of total number of patches]: Percentage of patches that have been grazed up to the current day during the current season.\ngrazing-land-use_dairy , grazing-land-use_transhumance [float, % of total number of grazed patches]: Percentage of patches grazed up to the current day during the current season that were used by one or another type.\n\nSustainability:\n\nunsustainable-state [Boolean]:\nunsustainable-dairy-herds , unsustainable-transhumance-herds [float, % of number of herds of type]:\n\nArchaeological proxies:\n\ndairy-hut-count :\ntotal-occupation-layers :",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dairy versus Transhumance",
    "section": "",
    "text": "Preface\nThe Dairy versus Transhumance model represents the long term seasonal interaction of the two types of pastoralism land uses in mountain pastures: dairy-focused and transhumant herds.",
    "crumbs": [
      "Preface"
    ]
  }
]